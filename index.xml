<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome on Gerundium</title>
    <link>https://gerundium.github.io/</link>
    <description>Recent content in Welcome on Gerundium</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://gerundium.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2.1 High level view</title>
      <link>https://gerundium.github.io/homelab_setup/highlevel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gerundium.github.io/homelab_setup/highlevel/</guid>
      <description>State/Version: 20230829p1
 2.1 High level view   2.1 High level view   Hardware, that belongs to the &amp;ldquo;Management&amp;rdquo; segment, knows routes into the other network segments and provides internet connectivity. Hardware grouped in IoT (Internet of Things/Trash) segment is considered as untrusted and therefore cannot connect to other network devices. It still can be controled via internet.  </description>
    </item>
    
    <item>
      <title>3.1 Overview</title>
      <link>https://gerundium.github.io/k8s_ha_cluster/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gerundium.github.io/k8s_ha_cluster/overview/</guid>
      <description>State/Version: 20240225
3.1 Overview 3.1.1 A few words before we start üöÄ Setting up a home lab takes time. The construction or renovation of a house is comparable in scope and complexity. In the end, you not only know where the pipes run, but also what you can do better when building the next one.
In addition to expertise, two character traits in particular are required to master a project like this.</description>
    </item>
    
    <item>
      <title>4.1 Overview</title>
      <link>https://gerundium.github.io/devbox/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gerundium.github.io/devbox/overview/</guid>
      <description>State/Version: 20240618
4.1 Overview What is a devbox and why do I need it? A devbox is an environment that contains your indivisual toolstack and settings. In fact it does not to be only one environment. You can break it down in fine grained, purpose oriented, environments e.g. one for your cloud stack (helm, kubectl, etc.) and another one with focus on python.
Technically it works similar to a package manager but without conflicting with operating level packages that were managed by tools like apt or dnf.</description>
    </item>
    
    <item>
      <title>2.2 Hardware</title>
      <link>https://gerundium.github.io/homelab_setup/hardware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gerundium.github.io/homelab_setup/hardware/</guid>
      <description>State/Version: 20230829p1
 2.2 Hardware   2.2 Baseline  2.2.0 Homelab Tier Ratings   2.2.1 Computing node 2.2.2 Managed Switch 2.2.3 Router 2.2.4 Raspberry Pi    2.2 Hardware  2.2 Baseline 2.2.0 Homelab Tier Ratings  Tier 0:  A completely fault-tolerant hardware with redundancy for every component. Is crucial for the project. IaaC (Infrastructure as a Code) (if capable). Is part of the backup conzept.   Tier 1:  Is crucial for the project.</description>
    </item>
    
    <item>
      <title>3.2 Provisioning the k8s nodes</title>
      <link>https://gerundium.github.io/k8s_ha_cluster/provisioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gerundium.github.io/k8s_ha_cluster/provisioning/</guid>
      <description>State/Version: 20240618
3.2 Provisioning the k8s nodes üöö 3.2.1 Development cluster üöß  The Development Cluster is privisioned with üè∑Ô∏èansible. Running as bare-metal variant of üè∑Ô∏ètalos on the üè∑Ô∏èVirtualbox platform.  The code for the development cluster is documented here: üåê homelab repository on github.
3.2.2 Staging cluster The Staging Cluster runs as a set of virtual machines on a üè∑Ô∏èProxmox host. The Terraform source code is also stored currently in a privat github repository and will be published soon in this üåê homelab repository on github</description>
    </item>
    
    <item>
      <title>4.2 Setup</title>
      <link>https://gerundium.github.io/devbox/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gerundium.github.io/devbox/setup/</guid>
      <description>State/Version: 20240618
 4.2 Setup   4.2.1 Deploy devbox shell as pod 4.2.2 Deploy devbox shell locally    4.2 Setup  4.2.1 Deploy devbox shell as pod  Github repository: gerundium/devbox  4.2.2 Deploy devbox shell locally  Github repository: gerundium/linux-base  </description>
    </item>
    
    <item>
      <title>2.3 Network</title>
      <link>https://gerundium.github.io/homelab_setup/network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gerundium.github.io/homelab_setup/network/</guid>
      <description>State/Version: 20230829p1
 2.3 Network topology  2.3.1 Overview    2.3 Network topology 2.3.1 Overview See also: High level view
   Network CIDR Project Type     192.168.2.0/24 Homelab / compute static   192.168.3.0/24 Homelab / storage static    </description>
    </item>
    
    <item>
      <title>3.3 Deploy Kubernetes</title>
      <link>https://gerundium.github.io/k8s_ha_cluster/deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gerundium.github.io/k8s_ha_cluster/deployment/</guid>
      <description>State/Version: 20240225
3.3 Deploy Kubernetes üöö Once the stage is prepared Kubernetes can be deployed.
3.3.1 Development cluster üöß The first iteartion of the Kubernetes homelab was provisioned as described on rechno-tims blog.
 üåê Automated build of HA k3s Cluster with kube-vip and MetalLB  Currently I replaced üè∑Ô∏èk3s with üè∑Ô∏ètalos because it fits better into my automated provisioning and configuration workflow.
The code is documented here: üåê homelab repository on github.</description>
    </item>
    
    <item>
      <title>2.4 Storage</title>
      <link>https://gerundium.github.io/homelab_setup/storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gerundium.github.io/homelab_setup/storage/</guid>
      <description>State/Version: 20230829p1
 2.4 Storage  2.4.1 Overview    2.4 Storage 2.4.1 Overview  The compute storage is located as local-lvm on the compute node. Backups are located on a NFS-Volume providet by a RaspberryPi.  %%{init: {&#34;flowchart&#34;: {&#34;htmlLabels&#34;: false}} }%% flowchart LR subgraph Proxmox-Host subgraph Proxmox-Storageprovider localDisk[&#34;`_localDisk_: local: (type: Directory) local-lvm: (type: LVM) `&#34;] RaspberryPi[&#34;`_RaspberryPi_: nfs-rpi: (type: NFS) `&#34;] end localDisk -- Backup -- RaspberryPi Container -- OS -- localDisk end  </description>
    </item>
    
    <item>
      <title>3.4 GitOps: Install and configure FluxCD</title>
      <link>https://gerundium.github.io/k8s_ha_cluster/gitops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gerundium.github.io/k8s_ha_cluster/gitops/</guid>
      <description>State/Version: 20240225
3.4 GitOps: Install and configure 3.4.1 GitOps: Install and configure FluxCD üèóÔ∏è Installing and Configuring üè∑Ô∏èFluxCD is the easy part ( if you do not mess up your dns setup :] ).
This will install Flux into the cluster and connect it to the specified git repository. You have to repeat it for every cluster you want to manage.
export GITHUB_TOKEN=&amp;lt;PersonalAccessToken&amp;gt; export GITHUB_USER=gerundium flux bootstrap github \  --token-auth \  --owner=gerundium \  --repository=flux-k2 \  --path=clusters/&amp;lt;STAGE&amp;gt; \  --personal \  --branch main At this point your fluxcd is authorized and configured to apply changes (pull-based), that are stored in your üè∑Ô∏ègithub-repository, to the Kubernetes cluster.</description>
    </item>
    
    <item>
      <title>2.5 Virtualization</title>
      <link>https://gerundium.github.io/homelab_setup/virtualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gerundium.github.io/homelab_setup/virtualization/</guid>
      <description>State/Version: 20230829p1
 2.5 Proxmox   2.5.0 Reference 2.5.1 Setup   2.5.1.1 Installation Process 2.5.1.2 Web Console Overview 2.5.1.3 User Management 2.5.1.4 Backups and Snapshots 2.5.1.5 DNS 2.5.1.6 Provisioning 2.5.1.7 Subscription   2.5.2 Maintenance     2.5 Proxmox   Proxmox Virtual Environment  Compute, network, and storage in a single solution    2.5.0 Reference  Proxmox Full Course  2.5.1 Setup  2.</description>
    </item>
    
    <item>
      <title>2.6 Configuration Management</title>
      <link>https://gerundium.github.io/homelab_setup/configurationmanagement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gerundium.github.io/homelab_setup/configurationmanagement/</guid>
      <description>State/Version: 20230829p1
 2.6 Configuration Management  2.6 Configuration Management  My &amp;ldquo;Configuration Management&amp;rdquo; tool of choice is Ansible (Semaphore) The HomeLab uses currently the following playbooks to automate common administration tasks:  private github repo       Playbook Purpose     apt-upgrade Keep the infrastructure containers (Ansible, bind9) up to date.   bind9 Install and manage bind9.   nfs-server Install and manage nfs-server.</description>
    </item>
    
    <item>
      <title>1.1 Documentation</title>
      <link>https://gerundium.github.io/introduction/documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gerundium.github.io/introduction/documentation/</guid>
      <description>State/Version: 20230829p1
Table of contents  Table of contents  1.1 About the author 1.2 About this blog  1.2.1 Creation process  1.2.1.1 Creation workflow        Skip the &amp;ldquo;Deep Dive&amp;rdquo; sections for a brief fly over.
 1.1 About the author  Senor Linux system administrator, cluster operator (automate provision and configuration of clusters), platform engineer (build continuous delivery for developer teams) and HomeLab enthusiast Daily business: #devops #kubernetes #openshift #gitops #ansible Current place of residence: Berlin (Germany)  1.</description>
    </item>
    
    <item>
      <title>1.2 Deep Dive</title>
      <link>https://gerundium.github.io/introduction/documentationdeepdive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gerundium.github.io/introduction/documentationdeepdive/</guid>
      <description>State/Version: 20230829p1
1.2.1.1 Creation workflow - Deep Dive Sequencediagram sequenceDiagram participant A as Laptop@local participant B as blog-source@github participant C as blog-rendered@github A-A: 1. Create content locally A-B: 2. Push code to blog-source@github Note over A, B: Commit action (push) will trigger &#34;Github Actions&#34; B-C: 3. Push static html from blog-source@github to blog-rendered@github (Github pages) via a &#34;Github Actions&#34;  1.2.2 Github setup    Alias Real world brief description     blog-source@github gerundium/gerundium.</description>
    </item>
    
  </channel>
</rss>
